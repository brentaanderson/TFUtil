<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <ItemGroup>
        <Import Include="$(MSBuildThisFileFullPath)" />
    </ItemGroup>

    <!--  Modifications to Microsoft.Common.CurrentVersion.targets  -->

    <!--
    ============================================================
               _DeploymentComputeClickOnceSymbolInfo

    Compute symbol files to be deployed with ClickOnce manifest.
    ============================================================
    -->
    <Target Name="_DeploymentComputeClickOnceSymbolInfo"
            AfterTargets="_DeploymentComputeClickOnceManifestInfo"
            Condition="'$(GenerateClickOnceManifests)'=='true' and '$(_DeploymentClickOnceManifestPublishSymbols)'=='true'">

        <ItemGroup>
            <DependencySymbols Include="@(_DeploymentManifestDependencies->'%(RootDir)%(Directory)%(FileName).pdb')" Condition="Exists('%(RootDir)%(Directory)%(FileName).pdb')" />
            <FileSymbols Include="@(_DeploymentManifestFiles->'%(RootDir)%(Directory)%(FileName).pdb')" Condition="Exists('%(RootDir)%(Directory)%(FileName).pdb')" />
            <EntryPointSymbols Include="@(_DeploymentResolvedManifestEntryPoint->'%(RootDir)%(Directory)%(FileName).pdb')" Condition="Exists('%(RootDir)%(Directory)%(FileName).pdb')" />

            <_DeploymentManifestFiles Include="@(DependencySymbols);@(FileSymbols);@(EntryPointSymbols)">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <IsDataFile>false</IsDataFile>
                <TargetPath>%(FileName)%(Extension)</TargetPath>
            </_DeploymentManifestFiles>
        </ItemGroup>
    </Target>




    <!--
    ============================================================
             SetProjectConfigurationAssignmentProperties

    Preset properties to ensure each referenced project is assigned the current configuration and platform.

    Overrides the default behaiour of ignoring the current build configuration in favour of each
    referenced projects' configuration and platform default (which may or may not be defined).
    ============================================================
    -->
    <Target Name="SetProjectConfigurationAssignmentProperties"
            BeforeTargets="AssignProjectConfiguration"
            Condition="'$(CurrentSolutionConfigurationContents)' != '' or '@(ProjectReference)'!=''">

        <PropertyGroup>
            <ShouldUnsetParentConfigurationAndPlatform>false</ShouldUnsetParentConfigurationAndPlatform>
            <AddSyntheticProjectReferencesForSolutionDependencies>true</AddSyntheticProjectReferencesForSolutionDependencies>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>false</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
        </PropertyGroup>
    </Target>



    <!--
    ============================================================
              BuildReferencedProjectsInsideVisualStudio

    Force building referenced projects inside Visual Studio.

    The ResolveProjectReferences task assumes IDE will have already built the project and any
    dependencies via solution build.

        [IN]
        @(_MSBuildProjectReferenceExistent) - The list of project references.

        [OUT]
        @(_ResolvedProjectReferencePaths) - Paths to referenced projects.
        %(_MSBuildProjectReferenceExistent.OutputItemType) - Type of project output.
    ============================================================
    -->
    <PropertyGroup>
        <!-- Safe default to bypass custom target unless explicitly overridden -->
        <UseSolutionBuild Condition="'$(UseSolutionBuild)' == ''">true</UseSolutionBuild>
    </PropertyGroup>

    <Target Name="BuildReferencedProjectsInsideVisualStudio"
            BeforeTargets="ResolveProjectReferences"
            Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(UseSolutionBuild)' == 'false'">

        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
                 Targets="%(_MSBuildProjectReferenceExistent.Targets)"
                 BuildInParallel="$(BuildInParallel)"
                 Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
                 Condition="'%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != ''"
                 ContinueOnError="$(ContinueOnError)"
                 RemoveProperties="NonExistentFile;BuildingInsideVisualStudio;UseHostCompilerIfAvailable)">

            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProjectReferencePaths" Condition="'%(_MSBuildProjectReferenceExistent.ReferenceOutputAssembly)'=='true' or '$(DesignTimeBuild)' == 'true'"/>
            <Output TaskParameter="TargetOutputs" ItemName="%(_MSBuildProjectReferenceExistent.OutputItemType)" Condition="'%(_MSBuildProjectReferenceExistent.OutputItemType)' != ''"/>
        </MSBuild>
    </Target>


</Project>
